// Sample picoMIPS program which could support affine transformation algorithm
// n = 8 bits, Isize = 12+n = 20 bits
// format: 6b opcode, 3b %d, 3b %s, 8b immediate or address
// x2 = a11*x1 + a12*y1 + b11; y2 = a21*x1 + a22*y1 + b21;
// HEX ///////////////// BINARY //////////////////////////////////////// ASSEMBLER ///////////////////////
04000    // 20'b000001_000_000_00000000    //   ADDI %0, %0, 0;    clear REG 0
1C080    // 20'b000111_000_000_10000000    //   BAT1 %-, %-, 1;    until Bstus=0 goto next Instruction
1C000    // 20'b000111_000_000_00000000    //   BAT0 %-, %-, 0;    until Bstus=1 goto next Instruction[REPEAT HERE]
18800    // 20'b000110_001_000_00000000    //   ADDF %1, %0, -;    REG 1 <= inport x1
19000    // 20'b000110_010_000_00000000    //   ADDF %2, %0, -;    REG 2 <= inport x1
1C080    // 20'b000111_000_000_10000000    //   BAT1 %-, %-, 1;    until Bstus=0 goto next Instruction
1C000    // 20'b000111_000_000_00000000    //   BAT0 %-, %-, 0;    until Bstus=1 goto next Instruction
19800    // 20'b000110_011_000_00000000    //   ADDF %3, %0, -;    REG 3 <= inport y1
1A000    // 20'b000110_100_000_00000000    //   ADDF %4, %0, -;    REG 4 <= inport y1
1C080    // 20'b000111_000_000_10000000    //   BAT1 %-, %-, 1;    until Bstus=0 goto next Instruction
14960    // 20'b000101_001_001_01100000    //   MULI %1, %1, 0.75; %1 = %1 * 0.75; // 0.75x1
152C0    // 20'b000101_010_010_11000000    //   MULI %2, %2, -0.5; %2 = %2 * -0.5; // -0.5x1
15B40    // 20'b000101_011_011_01000000    //   MULI %3, %3, 0.5;  %3 = %3 * 0.5;  // 0.5y1
16460    // 20'b000101_100_100_01100000    //   MULI %4, %4, 0.75; %4 = %4 * 0.75; // 0.75y1
00B00    // 20'b000000_001_011_00000000    //   ADD  %1, %3, -;    %1 = %1 + %3;   // 0.75x1 + 0.5y1
01400    // 20'b000000_010_100_00000000    //   ADD  %2, %4, -;    %2 = %2 + %4;   // -0.5x1 + 0.75y1
04914    // 20'b000001_001_001_00010100    //   ADDI %1, %1, 20;   %1 = %1 + 20;   // x2 = 0.75x1 + 0.5y1 + 20
20800    // 20'b001000_001_000_00000000    //   SHOW %1, %0, -;    SHOW %1
1C000    // 20'b000111_000_000_00000000    //   BAT0 %-, %-, 0;    until Bstus=1 goto next Instruction
052EC    // 20'b000001_010_010_11101100    //   ADDI %2, %2, -20;  %2 = %2 + -20;  // y2 = -0.5x1 + 0.75y1 - 20
21000    // 20'b001000_010_000_00000000    //   SHOW %2, %0, -;    SHOW %2
1C083    // 20'b000111_000_000_10000011    //   BAT1 %-, %-, 3;    until Bstus=0 goto LINE3 Instruction